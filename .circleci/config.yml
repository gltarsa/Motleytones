# Update this file to keep ruby, postgres, and/or phantomjs versions up
# to date.  If the Gemfile.lock file changes, caches will automatically be
# updated.  Otherwise, you will need to also change the cache-key name by adding a .1 to
# the current value.

version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.3.0

jobs:
  build:
    working_directory: ~/gltarsa/Motleytones
    parallelism: 1
    shell: /bin/bash --login

    # CircleCI 2.0 does not support environment variables that refer to each other.
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results

    # In CircleCI 2.0 you can now specify your own image, or use one of
    # our pre-configured images.  For more information on choosing an
    # image (or alternatively using a VM instead of a container) see
    #   https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for
    # most common languages see
    #   https://circleci.com/docs/2.0/circleci-images/

    # These pre-built docker images works well for this app.  They will
    # need updating when the Ruby version changes.  The latest list:
    #   https://circleci.com/docs/2.0/docker-image-tags.json
    #   -legacy suffix causes phantomjs to be loaded
    docker:
      - image: cimg/ruby:3.3.5-browsers
      - image: cimg/postgres:14.11-postgis
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_motley_test
          POSTGRES_PASSWORD: ""

    # Machine Setup
    steps:
    # If you break your build into multiple jobs with workflows, you will
    # probably want to do the parts of this that are relevant in each. The
    # following `checkout` command checks out your code to your working
    # directory.
    - checkout

    # Installs chrome so that the chromedriver from the webdrivers gem will find it
    - browser-tools/install-chrome

    # Prepare for artifact and test results collection.
    # See docs on artifact collection here
    #   https://circleci.com/docs/2.0/artifacts/
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS

    # Set the APP_VERSION environment variable from the built-in CIRCLE_SHA1
    # When deploying directly, this variable will be used by the app at runtime
    - run:
      name: Build and Deploy
      command: |
        export APP_VERSION=$CIRCLE_SHA1

    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows

    # Restore the dependency cache
    - restore_cache:
        keys:
        # Latest version of branch if available (save_cache adds a timestamp)
        - v1.1-dep-{{ .Branch }}-
        # Default branch if not
        - v1.1-dep-master-
        # Any branch if there are none on the default branch - this should be
        # unnecessary if you have your default branch configured correctly
        - v1.1-dep-

    # Commands to run to load libraries/gems.
    - run: echo -e "export RAILS_ENV=test\nexport RACK_ENV=test" >> $BASH_ENV
    - run: gem update bundler
    - run: bundle config set --local path 'vendor/bundle'
    - run: 'bundle check || bundle install --jobs=4 --retry=3'

    # Save dependency cache
    - save_cache:
        key: v1.1-dep-{{ .Branch }}-{{ epoch }}
        paths:
          - vendor/bundle

    # TODO: change this to use environment variables
    - run:
      name: Build config/database.yml for Test
      command: |-
        mkdir -p config && echo 'test:
          database: circle_ruby_test
          adapter: <%= ENV["DATABASE_ADAPTER"] %>
          encoding: <%= ENV["DATABASE_ENCODING"] %>
          pool: <%= ENV["DATABASE_POOL"] %>
          timeout: <%= ENV["DATABASE_TIMEOUT"] %>
          username: ubuntu
          host: localhost
        ' > config/database.yml
    - run:
      name: set RAILS_ENV variables and bundle exed
      command: |
        export RAILS_ENV="test"
        export RACK_ENV="test"
        bundle exec rake db:create db:schema:load --trace

    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    - run:
      name: Test
      command: |
        export RAILS_ENV="test"
        export RACK_ENV="test"
        bundle exec rspec --color --format progress spec
        bundle exec spinach

    # Teardown
    #   If you break your build into multiple jobs with workflows, you will
    #   probably want to do the parts of this that are relevant in each

    # Save test results
    # TODO: can these path values be environment variables?
    - store_test_results:
        path: /tmp/circleci-test-results
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
